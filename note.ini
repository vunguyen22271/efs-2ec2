psexec \\54.87.177.210 ipconfig
ping 54.87.177.210
ping 52.90.16.133
nc -zv 54.87.177.210 80

Test-NetConnection -ComputerName 54.87.177.210 -Port 80

nc -zv 52.55.230.68 3389
nc -zv 54.197.217.111 3389
54.197.217.111

# Enable File and Printer Sharing for Domain networks
Set-NetFirewallRule -DisplayGroup "File and Printer Sharing" -Profile Domain -Enabled True

# Enable File and Printer Sharing for Private networks
Set-NetFirewallRule -DisplayGroup "File and Printer Sharing" -Profile Private -Enabled True

# Enable File and Printer Sharing for Public networks
Set-NetFirewallRule -DisplayGroup "File and Printer Sharing" -Profile Public -Enabled True

# Allow port 80
Set-NetFirewallRule -DisplayName "World Wide Web Services (HTTP Traffic-In)" -Enabled True


# Store the current security protocol
$originalProtocol = [Net.ServicePointManager]::SecurityProtocol

# Set the security protocol to TLS 1.2
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

# Download PsTools (which includes PsExec) from the Sysinternals website
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/PSTools.zip" -OutFile "PSTools.zip"

# Restore the original security protocol
[Net.ServicePointManager]::SecurityProtocol = $originalProtocol

# Move PsExec to a directory in your PATH (e.g., C:\Windows\System32)
Move-Item -Path ".\PSTools.zip" -Destination "C:\Windows\System32"

# Unzip the downloaded file
Expand-Archive -Path "PSTools.zip" -DestinationPath "."

psexec /accepteula

54.198.192.148
35.153.130.236

nc -zv 54.198.192.148 445
nc -zv 35.153.130.236 135

psexec \\localhost ipconfig
psexec \\EC2AMAZ-VS9NE0P ipconfig


psexec \\35.153.130.236 ipconfig

Test-NetConnection -ComputerName 54.159.68.177 -Port 445
Test-NetConnection -ComputerName 10.0.0.95 -Port 445

psexec \\35.153.130.236 -u ec2amaz-uf6ilss\vuadmin1 -p YourPassword@123 ipconfig

psexec \\10.0.0.95 -u vuadmin1 -p YourPassword@123 cmd

psexec \\54.159.68.177 hostname

net use \\computername\ipc$ /user:adminname password
net use \\35.153.130.236\Admin$ /user:vuadmin1 YourPassword@123
cmdkey.exe /add:35.153.130.236 /user:vuadmin1 /pass:YourPassword@123

cmdkey.exe /add:54.159.68.177 /user:Administrators /pass:SaqLuvz7kS4d0tjBFrIw231b1ygyH6mYII+aGLJUcoXSHnA8CPpCbonzVFLjVh66O2exTBeImdRU4LTacZCZtvtCL1bSCjSFhNPh8ZtPgyQGy9/Tu5BdUSKeiaSnJcfn7XPFEVsZT3OZtMQ1+eTecEUX4QITEcN8qmsydxLsyq/VvrFOKTWri5+MvF9sCajUQbbAB/yq3iu5gduITiK6p8HaK4kCHEESuDQfQ4zIr7ZfcPP3BVY9wvGuabZroJSdxxs92zKtxX/wwYdu4kTJiWeBSQT/zc3aTfNwNxVAyeKiabFfLJjTtW+FXMc93Kg2GmGbLq1kuJRyvsmqHi5mKQ==

psexec.exe \\54.159.68.177 hostname

# Create a new user
$userPassword = ConvertTo-SecureString "YourPassword@123" -AsPlainText -Force
New-LocalUser "vuadmin1" -Password $userPassword -FullName "Vu Nguyen" -Description "Description"

# Add the new user to the Administrators group
Add-LocalGroupMember -Group "Administrators" -Member "vuadmin1"

# Grant the new user access to the admin$ share
# Note: This requires the SMBShare module, which is not available on all versions of Windows
Grant-SmbShareAccess -Name "admin$" -AccountName "vuadmin1" -AccessRight Full

# Enable administrative shares
Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EC2AMAZ-9K03JCM\Parameters" -Name "AutoShareWks" -Value 1

# Restart the Server service to apply the changes
Restart-Service -Name "LanmanServer"

Invoke-Command -ComputerName 35.153.130.236 -Credential vuadmin1 -ScriptBlock {
    Get-Culture
}
Invoke-Command -ComputerName localhost -Credential vuadmin1 -ScriptBlock {
    Get-Culture
}

response=$(aws ssm send-command \
    --document-name "AWS-RunPowerShellScript" \
    --document-version "1" \
    --parameters '{"workingDirectory":[""],"executionTimeout":["3600"],"commands":["ipconfig"]}' \
    --timeout-seconds 600 \
    --max-concurrency "50" \
    --max-errors "0" \
    --region us-east-1 \
    --instance-ids "i-0050085d9aa80009c")

command_id=$(echo "$response" | jq -r '.Command.CommandId')

aws ssm wait command-executed \
    --command-id $command_id \
    --instance-id 'i-0050085d9aa80009c'

aws ssm get-command-invocation \
    --command-id $command_id \
    --instance-id 'i-0050085d9aa80009c'

Import-Module CredentialManager

Set-ItemProperty "HKLM:\SOFTWARE\Microsoft\PowerShell\1\ShellIds" -Name "ConsolePrompting" -Value $True
# Get the credential from the user with a windows credentials prompt:
$SessionCredential = Get-Credential -Message 'Please enter your server credentials'

# Save the credential object directly without unwrapping it:
New-StoredCredential -Credentials $SessionCredential -Target ServerCredentials -Persist Enterprise `
  -Comment "Server Credentials for $($SessionCredential.UserName)" > $null

# Open the credential later
$SavedCred = Get-StoredCredential -Target ServerCredentials

# Delete if needed
Remove-StoredCredential -Target ServerCredentials


Test-WSMan
winrm quickconfig
winrm get winrm/config/client
winrm get winrm/config/service
winrm enumerate winrm/config/listener
$env:COMPUTERNAME
$env:USERDOMAIN

$credential = Get-Credential
vuadmin1
YourPassword@123
Test-WSMan -ComputerName 10.0.0.91 -Authentication Negotiate -Credential $credential

 
Get-NetTCPConnection -LocalPort 5985
Test-NetConnection -ComputerName 10.0.0.91 -Port 5985 -InformationLevel Detailed

Enter-PSSession -ComputerName 10.0.0.91 -Credential $credential
Enter-PSSession -ComputerName EC2AMAZ-9K03JCM -Credential $credential
Invoke-Command -ComputerName 10.0.0.91  -ScriptBlock { Get-Process } -Credential $credential
Invoke-Command -ComputerName 10.0.0.199  -ScriptBlock { Get-Process }
net use \\10.0.0.91\Admin$ /user:vuadmin1 YourPassword@123

get-service -ComputerName EC2AMAZ-3C2S8KK -Name spooler
get-service -ComputerName 10.0.0.91 -Name spooler


$credential=get-credential
$Session= New-PSSession -computername 10.0.0.91 -credential $credential  -Port 5985
Enter-PSSession $Session


Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile "dotnet-install.ps1"
C:\.\dotnet-install.ps1 -Channel STS

https://jasonwatmore.com/post/2021/12/07/net-create-and-run-a-simple-hello-world-web-app

dotnet new webapp -n MyWebApp

dotnet new web --name MyWebApp
cd MyWebApp
dotnet run --urls=http://localhost:8000/
dotnet publish --configuration Release

Invoke-WebRequest -Uri "http://52.23.181.3:8000/" -UseBasicParsing
Invoke-WebRequest -Uri "http://10.0.0.172:8000/" -UseBasicParsing
Invoke-WebRequest -Uri "http://localhost:8000/" -UseBasicParsing
Invoke-WebRequest -Uri "http://localhost:80/" -UseBasicParsing


nc -zv 52.23.181.3 8000
nc -zv 52.23.181.3 445
netsh advfirewall firewall add rule name="Open Port 8000" dir=in action=allow protocol=TCP localport=8000

netsh advfirewall firewall show rule name=all
netsh advfirewall firewall show rule name=all | findstr "8000"
netsh advfirewall firewall show rule name=all | findstr "8000"

Enable-WindowsOptionalFeature -online -featurename IIS-WebServerRole
Get-Service W3SVC
iisreset

C:\MyWebApp\bin\Release\net7.0\publish\
New-Item iis:\Sites\TestSite -bindings @{protocol="http";bindingInformation=":80:TestSite"} -physicalPath C:\MyWebApp\bin\Release\net7.0\publish

$SiteName = "publish"
$HostName = "localhost"
$SiteFolder = Join-Path -Path 'C:\MyWebApp\bin\Release\net7.0' -ChildPath $SiteName

New-WebSite -Name $SiteName -PhysicalPath $SiteFolder -Force
New-WebSite -Name $SiteName -PhysicalPath "C:\inetpub\wwwroot\publish" -Port 8000 -Force



$IISSite = "IIS:\Sites\$SiteName"
Set-ItemProperty $IISSite -name  Bindings -value @{protocol="http";bindingInformation="*:8000:$HostName"}

Start-WebSite -Name $SiteName
Stop-WebSite -Name $SiteName
Get-Website -Name $SiteName

Remove-Website -Name $SiteName

Invoke-WebRequest -Uri "http://localhost:8000/" -UseBasicParsing

Copy-Item -Path "C:\MyWebApp\bin\Release\net7.0\publish\*" -Destination "C:\inetpub\wwwroot\publish" -Recurse -Force

Remove-Item -Path "C:\inetpub\wwwroot\*" -Recurse -Force

#=======================
# Install SDK
$ProgressPreference = 'SilentlyContinue'
$url ="https://download.visualstudio.microsoft.com/download/pr/68ff350e-8b8d-4249-8678-570d5025f8e3/2178c63b5572b6016647525b53aa75b5/dotnet-sdk-6.0.420-win-x64.exe"
$output = "C:\dotnet-sdk-6.0.420-win-x64.exe"
Invoke-WebRequest -Uri $url -OutFile $output
C:\.\dotnet-sdk-6.0.420-win-x64.exe /install /quiet /norestart

# Install Hosting
$url = "https://download.visualstudio.microsoft.com/download/pr/c9277ae6-1bd2-47d6-aa9f-0409791e4a22/ce685479743a5567f43913362237e320/dotnet-hosting-6.0.28-win.exe"
$output = "C:\dotnet-hosting-6.0.28-win.exe"
Invoke-WebRequest -Uri $url -OutFile $output
C:\.\dotnet-hosting-6.0.28-win.exe /install /quiet /norestart

# Enable IIS
Enable-WindowsOptionalFeature -online -featurename IIS-WebServerRole

cd C:\
dotnet new web --name MyWebApp
cd MyWebApp
dotnet publish --configuration Release -o C:\inetpub\wwwroot\MyWebApp
New-WebSite -Name "MyWebApp" -PhysicalPath "C:\inetpub\wwwroot\MyWebApp" -Force

Start-WebSite -Name "MyWebApp"


$SiteName = "MyWebApp"
$HostName = "localhost"
$SiteFolder = Join-Path -Path 'C:\MyWebApp\bin\Release\net7.0' -ChildPath $SiteName

New-WebSite -Name $SiteName -PhysicalPath $SiteFolder -Force
New-WebSite -Name $SiteName -PhysicalPath "C:\inetpub\wwwroot\MyWebApp" -Port 8000 -Force

dotnet new webapp -n MyWebApp
cd MyWebApp
dotnet run --urls=http://localhost:8000/
dotnet publish --configuration Release -o C:\inetpub\wwwroot\MyWebApp